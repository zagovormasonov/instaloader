import os
import yt_dlp
import asyncio
import nest_asyncio
import random
import time

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

nest_asyncio.apply()

TOKEN = os.getenv("BOT_TOKEN")
COOKIES_DIR = "cookies"
MIN_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_request_time = {}

def get_random_cookies():
    cookies_files = [
        os.path.join(COOKIES_DIR, f)
        for f in os.listdir(COOKIES_DIR)
        if f.endswith(".txt")
    ]
    return random.choice(cookies_files) if cookies_files else None

def download_instagram_video(instagram_url, user_id):
    output_path = f"{user_id}_{int(time.time())}.%(ext)s"
    cookies_path = get_random_cookies()

    ydl_opts = {
        'outtmpl': output_path,
        'format': 'best[ext=mp4]',
        'quiet': True,
    }

    if cookies_path:
        ydl_opts['cookies'] = cookies_path

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(instagram_url, download=True)
        return ydl.prepare_filename(info)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram-–≤–∏–¥–µ–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    now = time.time()

    # –ê–Ω—Ç–∏—Å–ø–∞–º
    if user_id in last_request_time:
        delta = now - last_request_time[user_id]
        if delta < MIN_INTERVAL:
            await update.message.reply_text(f"‚è± –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {int(MIN_INTERVAL - delta)} —Å–µ–∫.")
            return

    last_request_time[user_id] = now

    if "instagram.com" not in text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram-–≤–∏–¥–µ–æ.")
        return

    await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

    try:
        file_path = download_instagram_video(text, user_id)
        await update.message.reply_video(video=open(file_path, 'rb'))
        os.remove(file_path)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())