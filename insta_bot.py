import os
import yt_dlp
import asyncio
import nest_asyncio
import sqlite3

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

from db import init_db, save_request, get_stats_summary, is_paid_user, save_paid_user

nest_asyncio.apply()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))  # –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
COOKIES_PATH = "cookies.txt"
TON_ADDRESS = "UQA7dn_RUi7WF2E2-gqhK4pmc2n4cx6yEqCb_M-Vn50gxU9s"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
init_db()

# –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ
def download_instagram_video(instagram_url):
    output_path = "video.%(ext)s"
    ydl_opts = {
        'outtmpl': output_path,
        'format': 'best[ext=mp4]',
        'quiet': True,
        'cookies': COOKIES_PATH,
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(instagram_url, download=True)
        return ydl.prepare_filename(info)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram-–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /pay –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username or "unknown"

    if not is_paid_user(user.id):
        await update.message.reply_text("‚ùóÔ∏è–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /pay")
        return

    text = update.message.text

    if "instagram.com" not in text:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram-–≤–∏–¥–µ–æ.")
        return

    await update.message.reply_text("‚è¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

    try:
        file_path = download_instagram_video(text)
        await update.message.reply_video(video=open(file_path, 'rb'))
        os.remove(file_path)
        save_request(user.id, username)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    summary = get_stats_summary()
    await update.message.reply_text(summary)

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ton_link = f"https://tonkeeper.com/transfer/{TON_ADDRESS}?amount=2&text=–ü–æ–¥–ø–∏—Å–∫–∞+–Ω–∞+–±–æ—Ç–∞"

    keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Tonkeeper üíé", url=ton_link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üí∞ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ–ø–ª–∞—Ç–∏—Ç–µ 2 TON –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞, —á—Ç–æ–±—ã –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:",
        reply_markup=reply_markup
    )

# –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pay", pay))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())

