import os
import logging
import yt_dlp
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "478113079:AAHcNPFtEfpn6O-i52fSvGOTeJgntu2ZgdA"

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp
async def download_instagram_video(url: str, output_path: str = "video.mp4") -> bool:
    try:
        ydl_opts = {
            'outtmpl': output_path,
            'format': 'best[ext=mp4]',
            'quiet': True,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        return os.path.exists(output_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        return False

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    if "instagram.com" not in url:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram-–≤–∏–¥–µ–æ.")
        return

    await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    success = await download_instagram_video(url)
    if success:
        await update.message.reply_video(video=open("video.mp4", "rb"))
        os.remove("video.mp4")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ üò¢")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError:
        # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Jupyter –∏–ª–∏ IDLE)
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())

